1. new Promise

2.
AXIOS:
.then
.finally

.try
.catch

.all
.spread

3. cosa sono le altre richieste HTTP:
- patch
... le trovi su postman

-----------

React:
1. npx create-react-app

per clonare un repo nel terminale:
git clone url


PROMISE (https://medium.com/webeetle/la-programmazione-asincrona-in-node-js-le-promises-98c9707c10c4):
Una promise è semplicemente un oggetto che può produrre un risultato, o un errore, di una operazione asincrona in un determinato momento nel futuro.

Una promise può trovarsi in quattro stati possibili:
- Pending: quando l’operazione asincrona non è ancora terminata
- Respinta: quando l’operazione asincrona è terminata con un errore. La funzione onRejected() viene invocata
- Risolta: quando l’operazione asincrona è terminata con un esito positivo. La funzione onFulfilled() viene invocata
- Saldata: quando l’operazione asincrona non è in pending (con un errore o con successo)

Le promises devono seguire una serie di regole ben definite, quali:
- una promise è un oggetto che fornisce un metodo .then() conforme allo standard
- una promise in pending può passare a uno stato risolta o respinta
- una promise risolta o respinta è saldata e non deve passare in nessun altro stato
- una promise una volta saldata deve avere un valore (che può essere undefined) e quel valore non deve cambiare

Il costruttore new Promise crea un'istanza che viene risolta o respinta in base alla funzione che viene fornita come argomento.
La funzione fornita al costruttore riceverà due argomenti:
    new Promise((resolve, reject) => {})

SE UNA FUNZIONE è ASINCRONA E NON RESTITUISCE UNA PROMISE NON è POSSIBILE CONVERTIRE IL SUO FUNZIONAMENTO IN SINCRONO MA SI PUò SOLO CONVERTIRE LA SUA NATURA

FETCH